name: Assign PR Reviewer
on:
  pull_request_review_comment:
    types: [created]
  issue_comment:
    types: [created]

jobs:
  assign-reviewer:
    runs-on: ubuntu-latest
    if: github.event.pull_request != null || github.event.issue.pull_request != null
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Check if PR and parse command
        id: parse
        run: |
          if [ "${{ github.event_name }}" == "pull_request_review_comment" ]; then
            comment="${{ github.event.comment.body }}"
            pr_number="${{ github.event.pull_request.number }}"
          elif [ "${{ github.event_name }}" == "issue_comment" ] && [ "${{ github.event.issue.pull_request }}" != "" ]; then
            comment="${{ github.event.comment.body }}"
            pr_number="${{ github.event.issue.number }}"
          else
            echo "Not a PR comment, skipping"
            exit 0
          fi
          
          # Normalize whitespace
          comment=$(echo "$comment" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//;s/[[:space:]]\+/ /g')
          
          # Match command: /assign-reviewer usernameA, usernameB ...
          if [[ "$comment" =~ ^/assign-reviewer[[:space:]]+(.+) ]]; then
            reviewers_raw="${BASH_REMATCH[1]}"
            
            # Split on commas or spaces, remove @ if included
            reviewers=$(echo "$reviewers_raw" | tr ',' ' ' | xargs -n1 | sed 's/^@//' | tr '\n' ' ')
            
            echo "reviewers=$reviewers" >> $GITHUB_OUTPUT
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            echo "valid_command=true" >> $GITHUB_OUTPUT
            echo "Found reviewers: $reviewers for PR #$pr_number"
          else
            echo "valid_command=false" >> $GITHUB_OUTPUT
            echo "Comment does not contain valid /assign-reviewer command"
            exit 0
          fi
        
      - name: Assign Reviewer(s) Individually
        if: steps.parse.outputs.valid_command == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_number="${{ steps.parse.outputs.pr_number }}"
          reviewers="${{ steps.parse.outputs.reviewers }}"
          
          assigned=""
          failed=""
          
          for r in $reviewers; do
            echo "Trying to assign reviewer: $r"
            if gh pr edit "$pr_number" --add-reviewer "$r"; then
              assigned="$assigned,$r"
            else
              failed="$failed,$r"
            fi
          done
          
          # Trim leading commas
          assigned=$(echo "$assigned" | sed 's/^,//')
          failed=$(echo "$failed" | sed 's/^,//')
          
          # Format lists with @mentions and commas
          if [ -n "$assigned" ]; then
            assigned_fmt=$(echo "$assigned" | sed 's/\([^,]\+\)/@\1/g' | sed 's/,/, /g')
          fi
          if [ -n "$failed" ]; then
            failed_fmt=$(echo "$failed" | sed 's/\([^,]\+\)/@\1/g' | sed 's/,/, /g')
          fi
          
          # Build comment body
          body=""
          if [ -n "$assigned_fmt" ]; then
            body+="ü§ñ **Reviewer(s) Assigned**: $assigned_fmt"$'\n\n'
          fi
          if [ -n "$failed_fmt" ]; then
            body+="‚ö†Ô∏è **Assignment Failed**: Could not assign reviewer(s): $failed_fmt. Please check if usernames are valid and have repository access."
          fi
          
          # Post final combined comment
          gh pr comment "$pr_number" --body "$body"
